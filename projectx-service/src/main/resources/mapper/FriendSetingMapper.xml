<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cci.projectx.core.repository.FriendSetingRepository">
  <resultMap id="BaseResultMap" type="com.cci.projectx.core.entity.FriendSeting">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="friend_id" jdbcType="BIGINT" property="friendId" />
    <result column="his_interact" jdbcType="INTEGER" property="hisInteract" />
    <result column="my_interact" jdbcType="INTEGER" property="myInteract" />
    <result column="blacklist" jdbcType="INTEGER" property="blacklist" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, friend_id, his_interact, my_interact, blacklist
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friend_seting
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from friend_seting
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.cci.projectx.core.entity.FriendSeting">
    insert into friend_seting (id, user_id, friend_id, 
      his_interact, my_interact, blacklist
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{friendId,jdbcType=BIGINT}, 
      #{hisInteract,jdbcType=INTEGER}, #{myInteract,jdbcType=INTEGER}, #{blacklist,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cci.projectx.core.entity.FriendSeting">
    insert into friend_seting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="friendId != null">
        friend_id,
      </if>
      <if test="hisInteract != null">
        his_interact,
      </if>
      <if test="myInteract != null">
        my_interact,
      </if>
      <if test="blacklist != null">
        blacklist,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="friendId != null">
        #{friendId,jdbcType=BIGINT},
      </if>
      <if test="hisInteract != null">
        #{hisInteract,jdbcType=INTEGER},
      </if>
      <if test="myInteract != null">
        #{myInteract,jdbcType=INTEGER},
      </if>
      <if test="blacklist != null">
        #{blacklist,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cci.projectx.core.entity.FriendSeting">
    update friend_seting
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="friendId != null">
        friend_id = #{friendId,jdbcType=BIGINT},
      </if>
      <if test="hisInteract != null">
        his_interact = #{hisInteract,jdbcType=INTEGER},
      </if>
      <if test="myInteract != null">
        my_interact = #{myInteract,jdbcType=INTEGER},
      </if>
      <if test="blacklist != null">
        blacklist = #{blacklist,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cci.projectx.core.entity.FriendSeting">
    update friend_seting
    set user_id = #{userId,jdbcType=BIGINT},
      friend_id = #{friendId,jdbcType=BIGINT},
      his_interact = #{hisInteract,jdbcType=INTEGER},
      my_interact = #{myInteract,jdbcType=INTEGER},
      blacklist = #{blacklist,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectCount" parameterType="com.cci.projectx.core.entity.FriendSeting" resultType="java.lang.Integer">
    select count(*) from friend_seting
    <where>
      <if test="id != null">
        and id = #{id,jdbcType=BIGINT}
      </if>
      <if test="userId != null">
        and user_id = #{userId,jdbcType=BIGINT}
      </if>
      <if test="friendId != null">
        and friend_id = #{friendId,jdbcType=BIGINT}
      </if>
      <if test="hisInteract != null">
        and his_interact = #{hisInteract,jdbcType=INTEGER}
      </if>
      <if test="myInteract != null">
        and my_interact = #{myInteract,jdbcType=INTEGER}
      </if>
      <if test="blacklist != null">
        and blacklist = #{blacklist,jdbcType=INTEGER}
      </if>
    </where>
  </select>
  <select id="selectPage" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friend_seting where 1 = 1 
    <if test="param1.id != null">
      and id = #{param1.id,jdbcType=BIGINT}
    </if>
    <if test="param1.userId != null">
      and user_id = #{param1.userId,jdbcType=BIGINT}
    </if>
    <if test="param1.friendId != null">
      and friend_id = #{param1.friendId,jdbcType=BIGINT}
    </if>
    <if test="param1.hisInteract != null">
      and his_interact = #{param1.hisInteract,jdbcType=INTEGER}
    </if>
    <if test="param1.myInteract != null">
      and my_interact = #{param1.myInteract,jdbcType=INTEGER}
    </if>
    <if test="param1.blacklist != null">
      and blacklist = #{param1.blacklist,jdbcType=INTEGER}
    </if>
    <if test="param2.sort != null">
      order by 
      <foreach collection="param2.sort" item="order" separator=",">
        ${order.property} ${order.direction}
      </foreach>
    </if>
    <if test="param2.offset >= 0 and param2.pageSize > 0">
      limit ${param2.offset}, ${param2.pageSize}
    </if>
  </select>
</mapper>